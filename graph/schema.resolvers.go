package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"time"

	"github.com/Dnyanesh2145/graphql-employee-application/database"
	"github.com/Dnyanesh2145/graphql-employee-application/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateEmployee is the resolver for the createEmployee field.

const employeeCollection = "employees"

func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	collection := database.DB.Collection(employeeCollection)

	employee := model.Employee{
		ID:       generateID(), // You can use UUID or ObjectID
		Name:     input.Name,
		Email:    input.Email,
		Position: input.Position,
	}

	_, err := collection.InsertOne(ctx, employee)
	if err != nil {
		return nil, err
	}
	return &employee, nil
}

func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	collection := database.DB.Collection(employeeCollection)
	cursor, err := collection.Find(ctx, bson.M{})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var employees []*model.Employee
	for cursor.Next(ctx) {
		var emp model.Employee
		if err := cursor.Decode(&emp); err != nil {
			return nil, err
		}
		employees = append(employees, &emp)
	}
	return employees, nil
}

func generateID() string {
	return time.Now().Format("EMP20060102150405")
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*model.Employee, error) {
	fmt.Println("id", id)
	collection := database.DB.Collection(employeeCollection)
	var employee model.Employee

	err := collection.FindOne(ctx, bson.M{"id": id}).Decode(&employee)
	if err != nil {
		return nil, err
	}
	return &employee, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
